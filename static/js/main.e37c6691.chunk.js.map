{"version":3,"sources":["components/common/CustomModal.js","App.js","serviceWorker.js","index.js"],"names":["CustomModal","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClose","setState","show","handleShow","state","react_default","a","createElement","Fragment","Modal","onHide","className","type","size","Header","closeButton","Title","title","Body","description","Footer","Button","variant","onClick","Component","App","openModal","modal","_this2","Container","Col","xs","CustomModal_CustomModal","ref","c","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAMqBA,cACjB,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAC1BG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KAOfQ,YAAc,WACZP,EAAKQ,SAAS,CAAEC,MAAM,KATIT,EAY5BU,WAAa,WACXV,EAAKQ,SAAS,CAAEC,MAAM,KAVtBT,EAAKW,MAAQ,CACXF,MAAM,GAJkBT,wEAiB1B,OACEY,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOP,KAAMN,KAAKQ,MAAMF,KAAMQ,OAAQd,KAAKI,YAAaW,UAAWf,KAAKL,MAAMqB,KAAMC,KAAK,MACvFR,EAAAC,EAAAC,cAACE,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACvBV,EAAAC,EAAAC,cAACE,EAAA,EAAMO,MAAP,KAAcpB,KAAKL,MAAM0B,QAE3BZ,EAAAC,EAAAC,cAACE,EAAA,EAAMS,KAAP,KAAatB,KAAKL,MAAM4B,aACxBd,EAAAC,EAAAC,cAACE,EAAA,EAAMW,OAAP,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS3B,KAAKI,aAA1C,SAGAK,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,QAAS1B,KAAKL,MAAMqB,KAAMW,QAAS3B,KAAKI,aAAhD,gBA7B2BwB,aC2C1BC,cAvCb,SAAAA,EAAYlC,GAAO,IAAAE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACjBhC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAA1B,KAAAH,KAAML,KAQRmC,UAAY,SAACd,EAAMK,GACjBxB,EAAKQ,SAAS,CACZW,OACAK,UAGFxB,EAAKkC,MAAMxB,cAZXV,EAAKW,MAAQ,CACXQ,KAAM,GACNO,YAAa,wPACbF,MAAO,IANQxB,wEAkBV,IAAAmC,EAAAhC,KACP,OACES,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAWlB,UAAU,OACjBN,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAKC,GAAI,IACP1B,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,kBAAIK,EAAKF,UAAU,UAAW,aAAzE,WADF,OAEErB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,QAAQ,iBAAiBC,QAAS,kBAAIK,EAAKF,UAAU,SAAU,WAAvE,UAFF,OAGErB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,kBAAIK,EAAKF,UAAU,UAAW,aAAzE,WAHF,OAIErB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,QAAQ,eAAeC,QAAS,kBAAIK,EAAKF,UAAU,OAAQ,UAAnE,QAJF,OAKErB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,kBAAIK,EAAKF,UAAU,UAAW,aAAzE,YAEFrB,EAAAC,EAAAC,cAACyB,EAAD,CACEC,IAAK,SAAAC,GAAC,OAAEN,EAAKD,MAAMO,GACnBtB,KAAMhB,KAAKQ,MAAMQ,KACjBO,YAAavB,KAAKQ,MAAMe,YACxBF,MAAOrB,KAAKQ,MAAMa,gBAjCZO,aCGEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e37c6691.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Modal,\n    Button\n} from 'react-bootstrap';\n\nexport default class CustomModal extends Component {\n    constructor(props, context) {\n      super(props, context);\n  \n      this.state = {\n        show: false,\n      };\n    }\n  \n    handleClose = () => {\n      this.setState({ show: false });\n    }\n  \n    handleShow = () => {\n      this.setState({ show: true });\n    }\n  \n    render() {\n      return (\n        <React.Fragment>\n          <Modal show={this.state.show} onHide={this.handleClose} className={this.props.type} size=\"lg\">\n            <Modal.Header closeButton>\n              <Modal.Title>{this.props.title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{this.props.description}</Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={this.handleClose}>\n                Close\n              </Button>\n              <Button variant={this.props.type} onClick={this.handleClose}>\n                Ok\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </React.Fragment>\n      );\n    }\n  }","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  Button,\n  Col,\n  Container\n} from 'react-bootstrap';\nimport { CustomModal } from './components';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      type: \"\",\n      description: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\",\n      title: \"\"\n    }\n  }\n  openModal = (type, title) => {\n    this.setState({\n      type,\n      title\n    });\n\n    this.modal.handleShow();\n  }\n\n  render() {\n    return (\n      <Container className=\"App\">\n          <Col xs={12}>\n            <Button variant=\"outline-success\" onClick={()=>this.openModal('success', 'Success')}>Success</Button>&nbsp;\n            <Button variant=\"outline-danger\" onClick={()=>this.openModal('danger', 'Error')}>Danger</Button>&nbsp;\n            <Button variant=\"outline-warning\" onClick={()=>this.openModal('warning', 'Warning')}>Warning</Button>&nbsp;\n            <Button variant=\"outline-info\" onClick={()=>this.openModal('info', 'Info')}>Info</Button>&nbsp;\n            <Button variant=\"outline-primary\" onClick={()=>this.openModal('primary', 'Primary')}>Primary</Button>\n          </Col>\n          <CustomModal \n            ref={c=>this.modal=c}\n            type={this.state.type}\n            description={this.state.description}\n            title={this.state.title}\n          />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}